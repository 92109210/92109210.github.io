<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/92109210</id>
    <title>Gridea</title>
    <updated>2021-04-19T15:46:44.664Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://github.com/92109210"/>
    <link rel="self" href="https://github.com/92109210/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://github.com/92109210/images/avatar.png</logo>
    <icon>https://github.com/92109210/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[数据库存储类型适用场景]]></title>
        <id>https://github.com/92109210/post/shu-ju-ku-cun-chu-lei-xing-gua-yong-chang-jing/</id>
        <link href="https://github.com/92109210/post/shu-ju-ku-cun-chu-lei-xing-gua-yong-chang-jing/">
        </link>
        <updated>2021-04-19T01:10:40.000Z</updated>
        <content type="html"><![CDATA[<h4 id="存储引擎">存储引擎</h4>
<pre><code>
存储引擎其实就是如何存储数据，如何为储存数据建立索引和如何更新数据等技术的实现方法因为关系型数据库中的数据是以表的形式储存的，所以存储引擎也可以称为表类型

</code></pre>
<h4 id="查询mysql存储引擎">查询MySQL存储引擎</h4>
<pre><code>
show engines;

show engines \g

以上两行代码是相同作用的

show engines \G 可以使得查询的结果更加美观

</code></pre>
<pre><code>
show variables like 'have%';

</code></pre>
<h4 id="innodb存储引擎">InnoDB存储引擎</h4>
<pre><code>
InnoDB给MySQL提供的表事务，回滚，崩溃修复能力和多版本并发控制的事务安全，InnoDB也是MYSQL上第一个提供外键约束表引擎

InnoDB存储引擎中支持自动增长列AUTO_INCREAMENT. 自动增长列的值不能为空而且必须唯一，MySQL中规定自动增长必须为主键。

也就是当插入值时，会自动增长

InnoDB支持外键，外键所在的表为子表，外键所依赖的表为父表，父表中被外键关联的字段必须为主键

在InnoDB引擎中，创建的表的表结构存储在 .frm文件中，数据和引擎存储在 innodb_data_home_dir 和 innodb_data_file_path表中

但是其读写效率比较差，占用空间相对比较大

</code></pre>
<h4 id="myisam存储引擎">MyISAM存储引擎</h4>
<pre><code>
frm表存储的结构

myd 存储数据，是MYData的简写

myi 存储索引，是MYIndex的简写

</code></pre>
<h4 id="数字类型">数字类型</h4>
<pre><code>
整型

TINYINT: 最小整数，有符号的范围：-127-127，无符号的范围：0-255，一个字节

BOOL: 最小整数，有符号的范围：-127-127，无符号的范围：0-255，一个字节

SMALLINT: 小型整数，有符号的范围：-32768-32767，无符号的范围：0-65536，两个字节

INT: 标准整数，4字节，

BIGINT: 大整数

</code></pre>
<pre><code>
浮点型

FLOAT: 单精度

DOUBLE: 双精度

DECIMAL: 可变

</code></pre>
<h4 id="选择技巧">选择技巧</h4>
<pre><code>
选择最小的可用性，如果值永远小于127，则使用TINYINT比INT好

对于完全都是数字的，可以选择整数类型

浮点型用于可能具有小数，例如购物单价，网上交付金额

</code></pre>
<h4 id="字符串类型">字符串类型</h4>
<pre><code>
普通文本字符串：CHAR和VARCHAR类型

可变类型：TEXT和BLOB

特殊类型：SET和ENUM

</code></pre>
<h4 id="普通文本字符串">普通文本字符串</h4>
<pre><code>
CHAR的长度是被固定的，VARCHAR长度是可变的，都是0-255个字符

</code></pre>
<h4 id="可变类型">可变类型</h4>
<pre><code>
大小可变，TEXT更适合用于存储长文本类型，

BLOB更适合于存储二进制数据，例如 图片，声音，文本。

</code></pre>
<h4 id="特殊类型">特殊类型</h4>
<pre><code>
存储枚举值 Enum('value1','value2')

存储集合值 Set('value1','value2')

</code></pre>
<h4 id="选择技巧-2">选择技巧</h4>
<pre><code>
当从速度方面考虑，优先选择CHAR类型

要节省空间，使用动态咧，可以选择VARCHAR

要列出内容限制在一种选择，可以使用ENUM类型

允许在一个列中有多于一条的条目，可以使用SET类型

如果要搜索内容不区分大小，可以使用TEXT类型

如果搜索的内容区分大小，可以使用BLOB类型

</code></pre>
<h4 id="日期和日期类型">日期和日期类型</h4>
<pre><code>
DATE 日期格式YYYY-MM-DD

TIME 时间格式HH:MM:SS

DATETIME 日期和时间格式YYYY-MM-DD HH:MM:SS

TIMESTAMP 时间标签 1907-01-01 00:00:00 2037年的某个时间

YEAR 1901-2155

</code></pre>
<h4 id="算术运算符">算术运算符</h4>
<pre><code>
= : 空值不能用(NULL) select id,books,id=27 from tb_books;

&lt;&gt;和!= : 空值不能用(NULL) select id,books,row&lt;&gt;1,row!=41,row!=24 from tb_books where id=27;

&gt; : 空值不能用(NULL) select id, books, roow&gt;90 from tb_books;

IS NULL : select id,books,row IS NULL from tb_books;

BETWEEN AND : select row,row between 10 and 50, row between 25 and 28 from tb_books;

IN : select row,row IN(10,95,30) from tb_books;

LIKE : select user,user like &quot;mr&quot;,user like &quot;%1%&quot; from tb_books;

</code></pre>
<h4 id="创建数据库">创建数据库</h4>
<pre><code>
create database 数据库名;

创建数据库的时候，我们应该记住以下几点：

1 不能与其他数据库名重复

2 名称可以由任意字母，阿拉伯数字，下划线，美元符，但是必须以字母开头

3 名称最长为64个字符，别名最长可为256个字符

4 在windows系统下，数据库名称不区分大小写，在linux下区分大小写

</code></pre>
<h4 id="查看数据库">查看数据库</h4>
<pre><code>
show databases;

查看所有的数据库

</code></pre>
<h4 id="选择数据库">选择数据库</h4>
<pre><code>
use 数据库名;

</code></pre>
<h4 id="删除数据库">删除数据库</h4>
<pre><code>
drop database 数据库名称;

这一步操作千万要谨慎，不然已经删除的数据库可能会找不回来了，这种操作太危险了，而且不是很常用

</code></pre>
<h4 id="创建数据表">创建数据表</h4>
<pre><code>
create table 表名;

还有其他许多属性

create table 表名 (列名1 属性, 列名2 属性...);

</code></pre>
<h4 id="查看表结构">查看表结构</h4>
<pre><code>
有三种方式

1 show columns from 表名 from 数据库名称;

2 show columns from 数据库名称.表名

3 desc 表名

4 查询某个字段 desc 表名 字段

</code></pre>
<h4 id="修改表结构">修改表结构</h4>
<pre><code>
alter table 数据表名 。。。。

比如我们添加一个字段emil 类型为varchar(50) not null, 将字段user的类型由varchar(30)变为varchar(40)

alter table tb_admin add emil varchar(50) not null, modify user varchar(40);

</code></pre>
<h4 id="重命名表名">重命名表名</h4>
<pre><code>
rename table 数据表名1 to 数据表名2

</code></pre>
<h4 id="删除表">删除表</h4>
<pre><code>
drop table 表名;

</code></pre>
<h4 id="插入数据">插入数据</h4>
<pre><code>
insert into 表名(字段名) values(字段值);

</code></pre>
<h4 id="查询数据">查询数据</h4>
<pre><code>
select [distinct][concat(col1,&quot;:&quot;,col2)] as collection_list

from 表名 指定数据表

where primary_constrait 查询条件

group by grouping_colums 如何对结果进行分组

order by sorting_columns 如何对结果进行排序

having secondary_constrait 查询条件

limit count 限制输出

</code></pre>
<h4 id="修改记录">修改记录</h4>
<pre><code>
update 表名 set 字段名=新的值 where 条件;

</code></pre>
<h4 id="删除记录">删除记录</h4>
<pre><code>
delete from 表名 where 条件;

</code></pre>
<h4 id="掌握函数">掌握函数</h4>
<p>mysql函数</p>
<pre><code>
数学函数：

用于处理数字，这类函数包括绝对值，正弦，余弦，随机函数等等

字符串函数：

用于处理字符串，其中包含字符串链接，字符串比较，字符串字母的大小写字母转换

日期和时间函数：

用于处理日期和时间，其中包括获取当前时间，获取当前日期，返回年份，返回日期

条件函数：

用于处理控制SQL语句时

系统函数：

用于获取MySQL数据库的系统信息

加密函数：

用于对字符串进行加密解密

其他函数：

包含格式化函数和锁函数

</code></pre>
<h4 id="绝对值函数">绝对值函数</h4>
<pre><code>
select abs(-5),abs(5);

</code></pre>
<h4 id="floor函数">floor()函数</h4>
<pre><code>
select floor(1.5),floor(-2);

</code></pre>
<h4 id="随机函数">随机函数</h4>
<pre><code>
select rand(),rand();

</code></pre>
<h4 id="pi函数">PI函数</h4>
<pre><code>
select PI();

</code></pre>
<h4 id="保留小数位">保留小数位</h4>
<pre><code>
select truncate(2.13445566,3);

</code></pre>
<h4 id="round函数">round函数</h4>
<pre><code>
select round(1.6),round(1.2),round(1.123456,3);

</code></pre>
<h4 id="sqrt函数">sqrt函数</h4>
<pre><code>
select sqrt(16),sqrt(25);

</code></pre>
<h4 id="insert函数">insert函数</h4>
<pre><code>
select insert(&quot;mrkj&quot;,3,2,&quot;book&quot;);

</code></pre>
<h4 id="字母转换函数">字母转换函数</h4>
<pre><code>
select upper(&quot;Ken&quot;),ucase(&quot;kenn&quot;);

</code></pre>
<h4 id="left函数">left函数</h4>
<pre><code>
select left(&quot;ken&quot;,2);

</code></pre>
<h4 id="rtrim函数">rtrim()函数</h4>
<pre><code>
select concat(&quot;+&quot;,rtrim(&quot; mr &quot;),&quot;+&quot;);

</code></pre>
<h4 id="substringsnlen">substring(s,n,len)</h4>
<pre><code>
select substring(&quot;mrbook&quot;,3,4);

</code></pre>
<h4 id="当前日期函数">当前日期函数</h4>
<pre><code>
select curdate(),current_date();

</code></pre>
<h4 id="当前时间函数">当前时间函数</h4>
<pre><code>
select curtime(),current_time();

</code></pre>
<h4 id="获取datetime函数">获取datetime函数</h4>
<pre><code>
select now();

</code></pre>
<h4 id="获取mysql版本以及连接id">获取mysql版本，以及连接id</h4>
<pre><code>
select version(),connection_id();

</code></pre>
<h4 id="获取系统用户">获取系统用户</h4>
<pre><code>
select user(),system_user(),session_user();

</code></pre>
<h4 id="对字符串进行加密">对字符串进行加密</h4>
<pre><code>
select password(&quot;Ken&quot;);

</code></pre>
<h4 id="对字符串进行md5加密">对字符串进行md5加密</h4>
<pre><code>
select md5(&quot;Ken&quot;);

</code></pre>
<h4 id="查询表中1列或者多列">查询表中1列或者多列</h4>
<pre><code>
select cat_id,cat_name from cat;

</code></pre>
<h4 id="从一个表中或者多个表中获取数据">从一个表中或者多个表中获取数据</h4>
<pre><code>
select tb_admin.id,tb_admin.tb_user,tb_students.id,tb_student.name

</code></pre>
<h4 id="查询所有字段">查询所有字段</h4>
<pre><code>
select * from 表名

</code></pre>
<h4 id="查询指定字段">查询指定字段</h4>
<pre><code>
select 字段名 from 表名

</code></pre>
<h4 id="例子">例子</h4>
<pre><code>
select user,pwd from tb_admin

</code></pre>
<h4 id="指定条件查询">指定条件查询</h4>
<pre><code>
select * from tb_login where user=&quot;mr&quot;;

</code></pre>
<h4 id="带in关键字查询">带IN关键字查询</h4>
<pre><code>
select * from tb_login where user IN(&quot;mr&quot;,&quot;lx&quot;);

</code></pre>
<h4 id="带between-and关键字查询">带between and关键字查询</h4>
<pre><code>
select * from tb_login where id between 5 and 7;

</code></pre>
<h4 id="带like的字符串匹配查询">带like的字符串匹配查询</h4>
<pre><code>
% 可以匹配一个或者多个字符串，可以代表任意长的字符串，比如

_ 只匹配一个字符，

select * from tb_login where user like &quot;%mr%&quot;;

</code></pre>
<h4 id="带-is-null-关键字查询空值">带 IS NULL 关键字查询空值</h4>
<pre><code>
用来判断字段的值是否为空值

select books,row from tb_book where row IS NULL;

</code></pre>
<h4 id="带-and-关键字查询">带 AND 关键字查询</h4>
<pre><code>
select * from tb_admin where user=&quot;mr&quot; and section=&quot;php&quot;;

</code></pre>
<h4 id="带-or-关键字查询">带 or 关键字查询</h4>
<pre><code>
select * from cat where cat_id=2 or cat_id=4;

</code></pre>
<h4 id="用distinct关键字去除结果中的重复行">用DISTINCT关键字去除结果中的重复行</h4>
<pre><code>
select distincr name from tb_login;

</code></pre>
<h4 id="用-order-by-关键字对查询结果进行排序">用 order by 关键字对查询结果进行排序</h4>
<pre><code>
desc 表示降序

asc 表示升序

select * from tb_login order by id desc;

</code></pre>
<h4 id="用group-by-关键字分组查询">用group by 关键字分组查询</h4>
<pre><code>
select id, books, talk from tb_book group by talk;

</code></pre>
<h4 id="按多个字段分组查询">按多个字段分组查询</h4>
<pre><code>
select id,books,talk,user from tb_book group by user,talk;

</code></pre>
<h4 id="用limit限制查询的结果">用limit限制查询的结果</h4>
<pre><code>
select * from tb_login order by id asc limit 3;

</code></pre>
<h4 id="count函数">count()函数</h4>
<pre><code>
select count(*) from tb_login;

查询记录条数

</code></pre>
<h4 id="sum函数">sum()函数</h4>
<pre><code>
select sum(row) from tb_login;

查询某个字段的值的综合

</code></pre>
<h4 id="avg函数">AVG()函数</h4>
<pre><code>
select avg(row) from tb_login;

查询某个字段的值的均值

</code></pre>
<h4 id="max函数">max()函数</h4>
<pre><code>
select max(row) from tb_login;

查询某个字段的值的最大值

</code></pre>
<h4 id="min函数">min()函数</h4>
<pre><code>
select min(row) from tb_login;

查询某个字段的值的最小值

</code></pre>
<h4 id="内连接查询">内连接查询</h4>
<pre><code>
内连接查询是最普遍的链接类型，而且是最均匀的，因为他们要求构成链接的每个部分的每一个表都匹配，不匹配的行将被排除。

用=等同链接使用是最常见的

select name,books from tb_login,tb_book where tb.login,user=tb_book.user;

</code></pre>
<h4 id="外连接查询">外连接查询</h4>
<pre><code>
外连接是指使用outer join 关键字将两个表连接起来，外连接结果不仅包含符合链接条件的行数据，

而且还包含左表，右表，两边链接中所有的数据行

</code></pre>
<h4 id="左外链接">左外链接</h4>
<pre><code>
是指将左表中的所有数据分别与右表的每一条数据进行链接组合，返回结果除内连接数据外，还包含左表中不符合条件的数据，并在右表的相应列中加NULL值

select section,tb_login.user,books,row from tb_login left join tb_book on tb_login.user=tb_book.user;

</code></pre>
<h4 id="右外表链接">右外表链接</h4>
<pre><code>
是指将右表的所有数据分别与左表中每条数据进行链接组合，返回的结果除内连接数据外，还包含左表中不符合条件的数据，并在左表中相应的列添加NULL

select section,tb_login.user,books,row from tb_login right join tb_book on tb_login.user=tb_book.user;

</code></pre>
<h4 id="复合链接查询">复合链接查询</h4>
<pre><code>
增加其他限制条件

select section,tb_login.user,books,row from tb_login , tb_book where tb_login.user=tb_book.user and row&gt;5;

</code></pre>
<h4 id="带关键字-in-的子查询">带关键字 IN 的子查询</h4>
<pre><code>
select * from tb_login where user in(select user from tb_book);

</code></pre>
<h4 id="带exist关键字的子查询">带exist关键字的子查询</h4>
<pre><code>
select * from tb_row where exist (select * from tb_book where id=27);

</code></pre>
<h4 id="带any关键字查询">带any关键字查询</h4>
<pre><code>
select books,row from tb_book where row

row

</code></pre>
<h4 id="带all关键字的子查询">带ALL关键字的子查询</h4>
<pre><code>
select books,row from tb_book where row&gt;=ALL(select row from tb_row);

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://github.com/92109210/post/hello-gridea/</id>
        <link href="https://github.com/92109210/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~<br>
好的</p>
]]></content>
    </entry>
</feed>